<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<bean id="tv" class="iocDI01_xml.LgTVi" lazy-init="true" scope="prototype"/>
	<!-- 원하는 객체를 생성해 달라고 하는 태그
		 class : Bean을 만들고 싶은 클래스 등록
		 id : 컨테이너에서 getBean()메서드의 인자로 받을 값
		 lazy-init = "true" : 호출 받을때만 생성되게 하는 속성
		 => 위에 lazy-init 이 없으면 컨테이너 구동시 bean을 다 생성해두게됨.
		 scope : 인스턴스 생성방식. 싱글톤, 프로토타입, request, session 
	 -->
	 <bean id="tvs" class="iocDI01_xml.SsTVi" lazy-init="true" scope="singleton"/>
	 <!-- 현재 TVUser02 에서 getBean()에 있는 인자가 tv이기 때문에
		  Lgtv가 생성될 것임.
		  이렇게 xml만 수정해서 소스코드 변경 없이 원하는 값을 변경 할 수 있게 됨.
	  -->
	  <!-- ** 설정화일
      => 스프링 컨테이너에게 Bean 생성을 요청하는 작업지시서 ** --> 
<!-- * 클래스 경로는 패키지가 포함된 경로를 지정해야 함 => 패키지.클래스명
    * 기본적으로 등록된 모든 bean을 생성함 
      => <bean....> Tag : new 생성자() 과 동일한 기능
      => 특별히 생성자의 매개변수에 대한 Tag 가 없다면 default 생성자를 사용함
      => lazy-init="default" : 무조건 생성 ( = false )
      => lazy-init="true" : 
            메모리 낭비 막기 위해 컨테이너 구동 시점이 아닌
            해당빈<bean> 을 사용하는(호출) 시점에 생성 
    * 싱글톤 생성이 기본 
      => scope="prototype" / "singleton" : 기본이 싱글톤   
      - singleton : 한 개의 객체만 생성하고 계속 재사용(default)
      - prototype : 빈을 요청할 때마다 객체를 새로 생성
      - request : 웹 환경에서 유효한 scope. 하나의 요청마다 bean 객체를 새로 생성함.
      - session : 웹 환경에서 유효한 scope. 첫요청 들어온 순간부터 해당세션이 유효한 동안 bean 객체를 유지시킴.
      - 애노테이션 방식에서는 @Scope 애노테이션으로 지정.
 -->

</beans>
